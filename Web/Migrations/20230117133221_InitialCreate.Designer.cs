// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Identity;

#nullable disable

namespace Equilibrium.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20230117133221_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("AccessGroupServerActionEntity", b =>
                {
                    b.Property<Guid>("AccessGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("AccessGroupsId", "ActionsId");

                    b.HasIndex("ActionsId");

                    b.ToTable("AccessGroupServerActionEntity");
                });

            modelBuilder.Entity("AccessGroupUser", b =>
                {
                    b.Property<Guid>("AccessGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("AccessGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AccessGroupUser");
                });

            modelBuilder.Entity("Equilibrium.Components.Identity.Entities.AccessGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccessGroups");
                });

            modelBuilder.Entity("Equilibrium.Components.Identity.Entities.ServerActionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHttpPost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServerActions");
                });

            modelBuilder.Entity("Equilibrium.Components.Identity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccessGroupServerActionEntity", b =>
                {
                    b.HasOne("Equilibrium.Components.Identity.Entities.AccessGroup", null)
                        .WithMany()
                        .HasForeignKey("AccessGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equilibrium.Components.Identity.Entities.ServerActionEntity", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccessGroupUser", b =>
                {
                    b.HasOne("Equilibrium.Components.Identity.Entities.AccessGroup", null)
                        .WithMany()
                        .HasForeignKey("AccessGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equilibrium.Components.Identity.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
